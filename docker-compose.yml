version: '3.8'

networks:
  spmarketvt-network:
    driver: bridge
    name: spmarketvt-network
    external: true

services:
  # runner:
  #   image: myoung34/github-runner:latest
  #   restart: unless-stopped
  #   environment:
  #     RUNNER_SCOPE: repo
  #     ACCESS_TOKEN: ${ACCESS_TOKEN}
  #     REPO_URL: https://github.com/eryk06/spmarketvt
  #     RUNNER_NAME_PREFIX: spmarketvt
  #     LABELS: linux,x64,gpu
  #     EPHEMERAL: 1
  #   volumes:
  #     - /var/run/docker.sock:/var/run/docker.sock
  #   deploy:
  #     replicas: 1
  #     resources:
  #       limits:
  #         cpus: '1'
  #         memory: 2G
  #       reservations:
  #         cpus: '0.5'
  #         memory: 1G
  #   networks:
  #     - spmarketvt-network

  nginx:
    image: nginx:alpine
    restart: unless-stopped
    volumes:
      - ./nginx/templates:/etc/nginx/templates
      - ./nginx/configuration/custom_proxy_settings.conf:/etc/nginx/conf.d/custom_proxy_settings.conf
    ports:
      - 80:80
    networks:
      - spmarketvt-network
    depends_on:
      - backend

  postgresql-master:
    container_name: postgresql-master
    image: bitnami/postgresql:latest
    restart: unless-stopped
    ports:
      - ${POSTGRESQL_MASTER_PORT_NUMBER}:${POSTGRESQL_MASTER_PORT_NUMBER}
    volumes:
      - postgresql_master_data:/bitnami/postgresql
      - ./db.sql:/docker-entrypoint-initdb.d/db.sql
    networks:
      - spmarketvt-network
    environment:
      - POSTGRESQL_REPLICATION_MODE=master
      - POSTGRESQL_REPLICATION_USER=${POSTGRESQL_REPLICATION_USER}
      - POSTGRESQL_REPLICATION_PASSWORD=${POSTGRESQL_REPLICATION_PASSWORD}
      - POSTGRESQL_USERNAME=${POSTGRESQL_USERNAME}
      - POSTGRESQL_PASSWORD=${POSTGRESQL_PASSWORD}
      - POSTGRESQL_DATABASE=${POSTGRESQL_DATABASE}
    healthcheck:
      test: ['CMD', 'pg_isready']
      interval: 30s
      timeout: 10s
      retries: 5

  postgresql-slave:
    container_name: postgresql-slave
    image: bitnami/postgresql:latest
    restart: unless-stopped
    ports:
      - ${POSTGRESQL_MASTER_PORT_NUMBER}
    depends_on:
      - postgresql-master
    networks:
      - spmarketvt-network
    environment:
      - POSTGRESQL_PASSWORD=${POSTGRESQL_PASSWORD}
      - POSTGRESQL_MASTER_HOST=${POSTGRESQL_MASTER_HOST}
      - POSTGRESQL_REPLICATION_MODE=slave
      - POSTGRESQL_REPLICATION_USER=${POSTGRESQL_REPLICATION_USER}
      - POSTGRESQL_REPLICATION_PASSWORD=${POSTGRESQL_REPLICATION_PASSWORD}
      - POSTGRESQL_MASTER_PORT_NUMBER=${POSTGRESQL_MASTER_PORT_NUMBER}

  backend:
    container_name: backend
    build:
      dockerfile: Dockerfile
      context: .
      target: development
    restart: unless-stopped
    env_file:
      - .env
    ports:
      - ${PORT}:${PORT}
    command: pnpm dev
    depends_on:
      - postgresql-master
      - redis
    volumes:
      - .:/app
    networks:
      - spmarketvt-network

  redis:
    container_name: redis
    image: redis:alpine
    restart: unless-stopped
    env_file:
      - .env
    ports:
      - ${REDIS_PORT}:${REDIS_PORT}
    volumes:
      - redis:/data
    networks:
      - spmarketvt-network
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 30s
      timeout: 10s
      retries: 5

  redis-commander:
    container_name: redis-commander
    image: rediscommander/redis-commander:latest
    restart: unless-stopped
    environment:
      REDIS_HOSTS: local:redis:6379
    ports:
      - 8081:8081
    depends_on:
      - redis
    networks:
      - spmarketvt-network

  adminer:
    container_name: adminer
    image: adminer:latest
    restart: unless-stopped
    env_file:
      - .env
    ports:
      - ${ADMINER_PORT}:${ADMINER_PORT}
    depends_on:
      - postgresql-master
    environment:
      ADMINER_DESIGN: dracula
      ADMINER_PLUGINS: tables-filter
    networks:
      - spmarketvt-network

volumes:
  backend:
    driver: local
  postgresql_master_data:
    driver: local
  adminer:
    driver: local
  redis:
    driver: local

  # runner:
  #   name: runner
  #   driver: local
